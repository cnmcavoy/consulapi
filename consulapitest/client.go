// Code autogenerated by mockery v2.0.0
//
// Do not manually edit the content of this file.

// Package consulapitest contains autogenerated mocks.
package consulapitest

import "github.com/shoenig/consulapi"
import "github.com/stretchr/testify/mock"
import "time"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateSession provides a mock function with given fields: dc, config
func (mockerySelf *Client) CreateSession(dc string, config consulapi.SessionConfig) (consulapi.SessionID, error) {
	ret := mockerySelf.Called(dc, config)

	var r0 consulapi.SessionID
	if rf, ok := ret.Get(0).(func(string, consulapi.SessionConfig) consulapi.SessionID); ok {
		r0 = rf(dc, config)
	} else {
		r0 = ret.Get(0).(consulapi.SessionID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, consulapi.SessionConfig) error); ok {
		r1 = rf(dc, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Datacenters provides a mock function with given fields:
func (mockerySelf *Client) Datacenters() ([]string, error) {
	ret := mockerySelf.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: dc, path
func (mockerySelf *Client) Delete(dc string, path string) error {
	ret := mockerySelf.Called(dc, path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(dc, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSession provides a mock function with given fields: dc, id
func (mockerySelf *Client) DeleteSession(dc string, id consulapi.SessionID) error {
	ret := mockerySelf.Called(dc, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, consulapi.SessionID) error); ok {
		r0 = rf(dc, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: dc, path
func (mockerySelf *Client) Get(dc string, path string) (string, error) {
	ret := mockerySelf.Called(dc, path)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(dc, path)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(dc, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Keys provides a mock function with given fields: dc, path
func (mockerySelf *Client) Keys(dc string, path string) ([]string, error) {
	ret := mockerySelf.Called(dc, path)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(dc, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(dc, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSessions provides a mock function with given fields: dc, node
func (mockerySelf *Client) ListSessions(dc string, node string) (map[consulapi.SessionID]consulapi.SessionConfig, error) {
	ret := mockerySelf.Called(dc, node)

	var r0 map[consulapi.SessionID]consulapi.SessionConfig
	if rf, ok := ret.Get(0).(func(string, string) map[consulapi.SessionID]consulapi.SessionConfig); ok {
		r0 = rf(dc, node)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[consulapi.SessionID]consulapi.SessionConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(dc, node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MaintenanceMode provides a mock function with given fields: enabled, reason
func (mockerySelf *Client) MaintenanceMode(enabled bool, reason string) error {
	ret := mockerySelf.Called(enabled, reason)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool, string) error); ok {
		r0 = rf(enabled, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Members provides a mock function with given fields: wan
func (mockerySelf *Client) Members(wan bool) ([]consulapi.AgentInfo, error) {
	ret := mockerySelf.Called(wan)

	var r0 []consulapi.AgentInfo
	if rf, ok := ret.Get(0).(func(bool) []consulapi.AgentInfo); ok {
		r0 = rf(wan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]consulapi.AgentInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(wan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Node provides a mock function with given fields: dc, name
func (mockerySelf *Client) Node(dc string, name string) (consulapi.NodeInfo, error) {
	ret := mockerySelf.Called(dc, name)

	var r0 consulapi.NodeInfo
	if rf, ok := ret.Get(0).(func(string, string) consulapi.NodeInfo); ok {
		r0 = rf(dc, name)
	} else {
		r0 = ret.Get(0).(consulapi.NodeInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(dc, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Nodes provides a mock function with given fields: dc
func (mockerySelf *Client) Nodes(dc string) ([]consulapi.Node, error) {
	ret := mockerySelf.Called(dc)

	var r0 []consulapi.Node
	if rf, ok := ret.Get(0).(func(string) []consulapi.Node); ok {
		r0 = rf(dc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]consulapi.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: dc, path, value
func (mockerySelf *Client) Put(dc string, path string, value string) error {
	ret := mockerySelf.Called(dc, path, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(dc, path, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadSession provides a mock function with given fields: dc, id
func (mockerySelf *Client) ReadSession(dc string, id consulapi.SessionID) (consulapi.SessionConfig, error) {
	ret := mockerySelf.Called(dc, id)

	var r0 consulapi.SessionConfig
	if rf, ok := ret.Get(0).(func(string, consulapi.SessionID) consulapi.SessionConfig); ok {
		r0 = rf(dc, id)
	} else {
		r0 = ret.Get(0).(consulapi.SessionConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, consulapi.SessionID) error); ok {
		r1 = rf(dc, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Recurse provides a mock function with given fields: dc, path
func (mockerySelf *Client) Recurse(dc string, path string) ([][2]string, error) {
	ret := mockerySelf.Called(dc, path)

	var r0 [][2]string
	if rf, ok := ret.Get(0).(func(string, string) [][2]string); ok {
		r0 = rf(dc, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][2]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(dc, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reload provides a mock function with given fields:
func (mockerySelf *Client) Reload() error {
	ret := mockerySelf.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenewSession provides a mock function with given fields: dc, id
func (mockerySelf *Client) RenewSession(dc string, id consulapi.SessionID) (time.Duration, error) {
	ret := mockerySelf.Called(dc, id)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(string, consulapi.SessionID) time.Duration); ok {
		r0 = rf(dc, id)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, consulapi.SessionID) error); ok {
		r1 = rf(dc, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service provides a mock function with given fields: dc, service, tags
func (mockerySelf *Client) Service(dc string, service string, tags ...string) ([]consulapi.Service, error) {
	mockeryVariadicArg := make([]interface{}, len(tags))
	for mockeryI := range tags {
		mockeryVariadicArg[mockeryI] = tags[mockeryI]
	}
	var mockeryCalledArg []interface{}
	mockeryCalledArg = append(mockeryCalledArg, dc, service)
	mockeryCalledArg = append(mockeryCalledArg, mockeryVariadicArg...)
	ret := mockerySelf.Called(mockeryCalledArg...)

	var r0 []consulapi.Service
	if rf, ok := ret.Get(0).(func(string, string, ...string) []consulapi.Service); ok {
		r0 = rf(dc, service, tags...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]consulapi.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...string) error); ok {
		r1 = rf(dc, service, tags...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Services provides a mock function with given fields: dc
func (mockerySelf *Client) Services(dc string) (map[string][]string, error) {
	ret := mockerySelf.Called(dc)

	var r0 map[string][]string
	if rf, ok := ret.Get(0).(func(string) map[string][]string); ok {
		r0 = rf(dc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
