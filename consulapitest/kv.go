// Code autogenerated by mockery v2.0.0
//
// Do not manually edit the content of this file.

// Package consulapitest contains autogenerated mocks.
package consulapitest

import "github.com/stretchr/testify/mock"

// KV is an autogenerated mock type for the KV type
type KV struct {
	mock.Mock
}

// Delete provides a mock function with given fields: dc, path
func (mockerySelf *KV) Delete(dc string, path string) error {
	ret := mockerySelf.Called(dc, path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(dc, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: dc, path
func (mockerySelf *KV) Get(dc string, path string) (string, error) {
	ret := mockerySelf.Called(dc, path)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(dc, path)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(dc, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Keys provides a mock function with given fields: dc, path
func (mockerySelf *KV) Keys(dc string, path string) ([]string, error) {
	ret := mockerySelf.Called(dc, path)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(dc, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(dc, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: dc, path, value
func (mockerySelf *KV) Put(dc string, path string, value string) error {
	ret := mockerySelf.Called(dc, path, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(dc, path, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Recurse provides a mock function with given fields: dc, path
func (mockerySelf *KV) Recurse(dc string, path string) ([][2]string, error) {
	ret := mockerySelf.Called(dc, path)

	var r0 [][2]string
	if rf, ok := ret.Get(0).(func(string, string) [][2]string); ok {
		r0 = rf(dc, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][2]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(dc, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
